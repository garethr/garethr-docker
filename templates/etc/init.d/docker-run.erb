#!/bin/sh
#
# This file is managed by Puppet and local changes
# may be overwritten
#
#    /etc/rc.d/init.d/<servicename>
#
#    Daemon for <%= @title %>
#
# chkconfig: 2345 97 15
# description: Docker container for <%= @title %>

### BEGIN INIT INFO
## Provides:       docker-<%= @sanitised_title %>
## Required-Start: $network docker<% if @depends %><% @sanitised_depends_array.each do |d| %><%= " docker-#{d}" %><% end %><% end %>
## Required-Stop: $network docker<% if @depends %><% @sanitised_depends_array.each do |d| %><%= " docker-#{d}" %><% end %><% end %>
## Should-Start:
## Should-Stop:
## Default-Start: 2 3 4 5
## Default-Stop:  0 1 6
## Short-Description: start and stop docker container for <%= @title %>
## Description: Docker container for <%= @title %>
#### END INIT INFO

if [ -e /etc/init.d/functions ]; then
    . /etc/init.d/functions
elif [ -e /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
    failure() {
        log_failure_msg "$@"
        return 1
    }
    success() {
        log_success_msg "$@"
        return 0
    }
else
    failure() {
        echo "fail: $@" >&2
        exit 1
    }
    success() {
        echo "success: $@" >&2
        exit 0
    }
fi

HOME=/root/
docker="/usr/bin/<%= @docker_command %>"
prog="docker-<%= @sanitised_title %>"
if [ -d /var/lock/subsys ]; then
    lockfile="/var/lock/subsys/$prog"
else
    unset lockfile
fi

start() {
    [ -x $docker ] || exit 5

    is_running=$($docker inspect -f '{{.State.Running}}' '<%= @name %>' 2> /dev/null || echo 'false')
    if [ "$is_running" = 'true'  ]; then
        failure
        echo
        echo 'Container <%= @name %> is still running.'
        exit 7
    fi

    $docker rm '<%= @name %>' || true

    printf "Starting $prog:\t"
    <% if @pull_on_start -%>
        $docker pull <%= @image %>
    <% end -%>
    $docker run -d=true \
        <%= @docker_run_flags %> \
        --name <%= @name %> \
        <% if @extra_parameters %><% @extra_parameters_array.each do |param| %>  \
            <%= param %> <% end %> \
        <% end -%> \
        <%= @image %> \
       <% if @command %> <%= @command %><% end %>
    retval=$?
    echo
    if [ $retval -eq 0 ]; then
        [ -n "$lockfile" ] && touch $lockfile
        success
    else
        failure
    fi
}

stop() {
    printf "Stopping $prog:\t"
    $docker stop '<%= @name %>'
    retval=$?
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

case "$1" in
    start)
    start
    ;;
    stop)
    stop
    ;;
    status)
    if [ 'false' = "$(docker inspect --format='{{.State.Running}}' '<%= @name %>')"  ] ; then
        echo "$prog not running"
        exit 1
    fi
    docker inspect '<%= @name %>'
    ;;
    restart|reload)
    stop
    start
    ;;
    condrestart)
    [ -f /var/lock/subsys/$prog ] && restart || :
    ;;
    *)
    echo "Usage: $0 [start|stop|status|reload|restart|probe]"
    exit 1
    ;;
esac
exit $?
