#!/bin/sh
#
# This file is managed by Puppet and local changes
# may be overwritten
#
#    /etc/rc.d/init.d/<servicename>
#
#    Daemon for <%= @title %>
#
# chkconfig: 2345 97 15
# description: Docker container for <%= @title %>

### BEGIN INIT INFO
## Provides:       docker-<%= @sanitised_title %>
## Required-Start: $network docker<% if @depends %><% @sanitised_depends_array.each do |d| %><%= " docker-#{d}" %><% end %><% end %>
## Required-Stop: $network docker<% if @depends %><% @sanitised_depends_array.each do |d| %><%= " docker-#{d}" %><% end %><% end %>
## Should-Start:
## Should-Stop:
## Default-Start: 2 3 4 5
## Default-Stop:  0 1 6
## Short-Description: start and stop docker container for <%= @title %>
## Description: Docker container for <%= @title %>
#### END INIT INFO

if [ -e /etc/init.d/functions ]; then
    . /etc/init.d/functions
elif [ -e /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
    failure() {
        log_failure_msg "$@"
        return 1
    }
    success() {
        log_success_msg "$@"
        return 0
    }
else
    failure() {
        echo "fail: $@" >&2
        exit 1
    }
    success() {
        echo "success: $@" >&2
        exit 0
    }
fi

HOME=/root/
docker="/usr/bin/<%= @docker_command %>"
prog="docker-<%= @sanitised_title %>"
cidfile="/var/run/$prog.cid"
if [ -d /var/lock/subsys ]; then
    lockfile="/var/lock/subsys/$prog"
else
    unset lockfile
fi

start() {
    [ -x $docker ] || exit 5

    if [ -f $cidfile ]; then
        cid="$(cat $cidfile)"
        if [ -n "$cid" ]; then
            $docker ps --no-trunc=true|grep $cid
            retval=$?
            if [ $retval -eq 0 ]; then
                failure
                echo
                printf "Container $cid is still running.\n"
                exit 7
            else
                rm -f $lockfile
            fi
        fi
    fi

    printf "Starting $prog:\t"
    <% if @pull_on_start -%>
        $docker pull <%= @image %>
    <% end -%>
    if [ -f $cidfile ]; then
    <% if @use_name -%>
        $docker start <%= @name %>
    <% else -%>
        $docker start $(cat $cidfile)
    <% end -%>
    else
        $docker run --cidfile=$cidfile \
        <%= @docker_run_flags %> \
        <% if @use_name %>--name <%= @name %><% end %> \
        <% if @extra_parameters %><% @extra_parameters_array.each do |param| %>  \
            <%= param %> <% end %> \
        <% end -%> \
        <%= @image %> \
       <% if @command %> <%= @command %><% end %>

    fi
    retval=$?
    echo
    if [ $retval -eq 0 ]; then
	[ -n "$lockfile" ] && touch $lockfile
        success
    else
        failure
    fi
}

stop() {
    if ! [ -f $cidfile ]; then
        failure
        echo
        printf "$cidfile does not exist.\n"
        exit 7
    else
        cid="$(cat $cidfile)"
        if [ -n $cid ]; then
            echo -n $"Stopping $prog: "
            $docker stop $(cat $cidfile)
            retval=$?
            [ $retval -eq 0 ] && rm -f $lockfile
            return $retval
        fi
    fi
}

clean() {
    if ! [ -f $cidfile ]; then
        failure
        echo
        printf "$cidfile does not exist.\n"
    else
        rm $cidfile
        retval=$?
        return $retval
    fi
}

case "$1" in
    start)
    start
    ;;
    stop)
    stop
    ;;
    status)
        if [ "false" = "$($docker inspect --format='{{.State.Running}}' $(cat $cidfile))"  ] ; then
        echo $prog not running
        exit 1
    fi
    $docker inspect $(cat $cidfile)
    ;;
    restart|reload)
    stop
    start
    ;;
    clean)
    clean
    ;;
    cleanRestart)
    stop
    clean
    start
    ;;
    condrestart)
    [ -f /var/lock/subsys/$prog ] && restart || :
    ;;
    *)
    echo "Usage: $0 [start|stop|status|reload|restart|probe|clean|cleanRestart]"
    exit 1
    ;;
esac
exit $?
